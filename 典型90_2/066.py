#転倒数　

"""
#問題文 数列屋の高橋くんは長さ N の数列 a を作っています。数列 a の i 番目の要素 a i ​ の値は、 L i ​ 以上 R i ​ 以下の 整数 から一様ランダムに選ぶことで決定されます。 このようにしてできた数列 a の転倒数の期待値を求めてください。 なお、長さ m の数列 x の「転倒数」とは、 i<j かつ x i ​ >x j ​ であるような (i,j) (1≤i,j≤m) の個数のことです。
"""
N = int(input())

if N == 1:
    print(0)
    exit()

lr = [list(map(int, input().split())) for _ in range(N)]  # [l, r]のペアを格納
ans = 0

for i in range(N):
    for j in range(i+1, N):
        l1, r1 = lr[i]
        l2, r2 = lr[j]

        all_cnt = (r1 - l1 + 1) * (r2 - l2 + 1)
        cnt = 0

        for val in range(l1, r1 + 1):
            cnt += max(0, min(r2, val - 1) - l2 + 1)  # valより小さい数の個数を足す

        ans += cnt / all_cnt  # 期待値を足す

print(ans)


"""
この問題では、各要素 \(a_i\) が範囲 \(L_i\) から \(R_i\) の整数からランダムに選ばれ、そのようにしてできた数列 \(a\) の転倒数の期待値を求める必要があります。転倒数とは、数列内での \(i < j\) かつ \(a_i > a_j\) となる組み合わせの数です。

### コードの解説
1. **初期入力**
   - \(N\) を入力として受け取ります。
   - \(N = 1\) の場合、転倒数は0なので、0を出力してプログラムを終了します。
   - それ以外の場合、各 \(L_i\) と \(R_i\) を受け取ります。

   ```python
   N = int(input())
   if N == 1:
       print(0)
       exit()
   lr = [list(map(int, input().split())) for _ in range(N)]  # [l, r]のペアを格納
   ```

2. **期待値の計算**
   - 数列の各要素の組み合わせに対して、転倒数の期待値を計算していきます。
   - 要素 \(a_i\) と要素 \(a_j\)（\(i < j\)）が転倒数を形成する期待値は、以下のように計算します：
      1. \(a_i\) と \(a_j\) の全ての可能な組み合わせの数は、\((r1 - l1 + 1) * (r2 - l2 + 1)\) です。
      2. \(a_i > a_j\) となる組み合わせの数を数えます。これは、\(l1\) から \(r1\) の各値に対して、その値より小さい値の数を \(l2\) から \(r2\) の範囲で数え上げることによって求まります。
      3. 転倒数の期待値は、\(a_i > a_j\) となる組み合わせの数を全ての可能な組み合わせの数で割ったものになります。

 1. \(a_i\) と \(a_j\) の全ての可能な組み合わせの数((r1 - l1 + 1) * (r2 - l2 + 1)\) 
 `a_i` と `a_j` の可能な組み合わせの数を計算するために、各要素が取りうる値の範囲を考えます。
- `a_i` の取りうる値の範囲は `l1` から `r1` までですので、`a_i` が取り得る値の数は `(r1 - l1 + 1)` になります。
- 同様に、`a_j` の取り得る値の数は `(r2 - l2 + 1)` になります。

したがって、`a_i` と `a_j` の全ての可能な組み合わせの数は、これらを掛け合わせた `(r1 - l1 + 1) * (r2 - l2 + 1)` になります。

 2. \(a_i > a_j\) となる組み合わせの数を数えます。これは、\(l1\) から \(r1\) の各値に対して、その値より小さい値の数を \(l2\) から \(r2\) の範囲で数え上げる
 このコード行は、与えられた`val`に対して、`l2`から`r2`の間で`val`よりも小さい整数の数を計算しています。ここで、`val`は`l1`から`r1`の間で取り得る各値です。

### `max(0, min(r2, val - 1) - l2 + 1)`
この式を分解してみましょう。
- `min(r2, val - 1)`: `val - 1`と`r2`のうち、小さい方を選びます。これにより、`val`より小さい値の中で、`r2`を越えない最大の値が選ばれます。
- `min(r2, val - 1) - l2 + 1`: 上で求めた値から`l2`を引いて、`1`を足します。これで`l2`から`r2`の間で、`val`より小さい整数の数が得られます。
- `max(0, ... )`: もし`val`が`l2`以下であれば、`val`より小さい値は`l2`から`r2`の間には存在しないので、結果として`0`を返します。これにより、負の値を防ぎます。

### 実例での考察
例えば、`l2=2`, `r2=4` そして `val=3` だとすると：
- `min(r2, val - 1)`: `min(4, 2) = 2` となります。
- `min(r2, val - 1) - l2 + 1`: `2 - 2 + 1 = 1` となります。
この結果、`l2`から`r2`の間で`val`より小さい整数は`1`つだけ存在することがわかります。

これを`cnt`に加えることで、全ての`val`について、`l2`から`r2`の間で`val`より小さい整数の合計数が求められます。



### 具体例での説明
- \(L_1 = 1\), \(R_1 = 3\) と仮定します。すると、`a_i` は \(1, 2, 3\) の \(3\) つの値を取りうるので、`a_i` の取り得る値の数は \(R_1 - L_1 + 1 = 3 - 1 + 1 = 3\) になります。
- 同様に、\(L_2 = 2\), \(R_2 = 4\) と仮定すると、`a_j` の取り得る値の数は \(R_2 - L_2 + 1 = 4 - 2 + 1 = 3\) になります。

これを掛け合わせると、`a_i` と `a_j` の全ての可能な組み合わせの数は、\(3 * 3 = 9\) 通りとなります。


   ```python
   ans = 0
   for i in range(N):
       for j in range(i+1, N):
           l1, r1 = lr[i]
           l2, r2 = lr[j]
           all_cnt = (r1 - l1 + 1) * (r2 - l2 + 1)  # 全ての可能な組み合わせの数
           cnt = 0  # a_i > a_j となる組み合わせの数
           for val in range(l1, r1 + 1):
               cnt += max(0, min(r2, val - 1) - l2 + 1)  # valより小さい数の個数を足す
           ans += cnt / all_cnt  # 期待値を足す
   print(ans)
   ```

### 例
例として、次の入力の場合を考えます。

- \(N = 3\)
- \(L_1 = 1\), \(R_1 = 2\)
- \(L_2 = 2\), \(R_2 = 3\)
- \(L_3 = 3\), \(R_3 = 4\)

この場合、数列 \(a\) の可能な組み合わせは \(2 * 2 * 2 = 8\) 通りです。それぞれの組み合わせに対して、転倒数を計算し、その平均値（期待値）を求めることになります。
"""