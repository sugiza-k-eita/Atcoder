# 入力
N, L = map(int, input().split())

# NがLより小さい場合、移動方法は1通りしかないので、1を出力してプログラムを終了
if N < L:
    print(1)
    exit()

# DPテーブルの初期化
dp = [0 for i in range(N+1)]

# 0からL-1までの各段については、移動方法は1通りしかない
for i in range(L):
    dp[i] = 1

# L段目については、0段目から一気にL段上る方法と、1段ずつ上る方法の2通りがある
dp[L] = 2

# L+1段目からN段目までの各段については、直前の段から1段上る方法と、L段前から一気にL段上る方法の和が移動方法の総数となる
for i in range(L+1, N+1):
    dp[i] = dp[i-1] + dp[i-L]
    # 答えが大きくなりすぎるのを防ぐため、各段ごとに10^9 + 7で割った余りを求める
    dp[i] %= 10**9+7

# N段目に至る移動方法の総数を出力
print(dp[-1])



"""
記事に盛り込みたい内容
E869120君が階段を上る方法を求めるという問題です。一歩で上ることができる階段の数は1段かL段の2種類であり、0段目からN段目に至るまでの移動方法の総数を求めます。ここでは、計算効率を高めるために動的計画法（DP）という手法を用います。

N段目にたどり着く方法は以下の2通りからなります。
・N-1段目にいて、そこから1段上がる
・N-L段目にいて、そこからL段上がる
つまり、N段目の通り数(状態)を考えるには、N-1段目までの通り数(状態)を見れば良い。

"""